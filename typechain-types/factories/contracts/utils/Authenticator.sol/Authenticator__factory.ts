/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  Authenticator,
  AuthenticatorInterface,
} from "../../../../contracts/utils/Authenticator.sol/Authenticator";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_address",
        type: "address",
      },
    ],
    name: "checkAuth",
    outputs: [
      {
        internalType: "enum AuthType",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5060016000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506101bf806100776000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80634b16509014610030575b600080fd5b61004a600480360381019061004591906100ca565b610060565b604051610057919061016e565b60405180910390f35b6000919050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006100978261006c565b9050919050565b6100a78161008c565b81146100b257600080fd5b50565b6000813590506100c48161009e565b92915050565b6000602082840312156100e0576100df610067565b5b60006100ee848285016100b5565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60038110610137576101366100f7565b5b50565b600081905061014882610126565b919050565b60006101588261013a565b9050919050565b6101688161014d565b82525050565b6000602082019050610183600083018461015f565b9291505056fea2646970667358221220d0221fa09b0b3824d89ba636103dde76215e1fbc9354d99662fa327dcd0cc32f64736f6c63430008090033";

type AuthenticatorConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: AuthenticatorConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Authenticator__factory extends ContractFactory {
  constructor(...args: AuthenticatorConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Authenticator> {
    return super.deploy(overrides || {}) as Promise<Authenticator>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Authenticator {
    return super.attach(address) as Authenticator;
  }
  override connect(signer: Signer): Authenticator__factory {
    return super.connect(signer) as Authenticator__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AuthenticatorInterface {
    return new utils.Interface(_abi) as AuthenticatorInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Authenticator {
    return new Contract(address, _abi, signerOrProvider) as Authenticator;
  }
}
