/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type { IDDR, IDDRInterface } from "../../../contracts/interface/IDDR";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "prescriptionId",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "_address",
        type: "address",
      },
    ],
    name: "discloseApproval",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "prescriptionId",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "_address",
        type: "address",
      },
    ],
    name: "getDiscloseApproval",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "getHashValue",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256[]",
        name: "DDRIds",
        type: "uint256[]",
      },
      {
        internalType: "address",
        name: "senderAddress",
        type: "address",
      },
    ],
    name: "setLockDDR",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

export class IDDR__factory {
  static readonly abi = _abi;
  static createInterface(): IDDRInterface {
    return new utils.Interface(_abi) as IDDRInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): IDDR {
    return new Contract(address, _abi, signerOrProvider) as IDDR;
  }
}
